plugins {
    id 'com.android.application'
    id 'kotlin-android'
}





//setting start
def stableJDK = JavaVersion.VERSION_11
def stableBuildToolsV = "30.0.3"

def canaryJDK = JavaVersion.VERSION_15
def canaryBuildToolsV = "31.0.0"

def customVersionName = "1.5.1"

def isCanaryVersion = enable_canary
def BuildToolsWithSourceCode = enable_buildwithsourcecode

//setting end




def stableBT = [
        buildToolsVersion: stableBuildToolsV,
        compileSdk       : Integer.valueOf(stableBuildToolsV.split("\\.")[0])
]
def canaryBT = [
        buildToolsVersion: canaryBuildToolsV,
        compileSdk       : Integer.valueOf(canaryBuildToolsV.split("\\.")[0])
]

def stable = [
        targetSdk          : Integer.valueOf(stableBuildToolsV.split("\\.")[0]),

        sourceCompatibility: stableJDK,
        targetCompatibility: stableJDK,
        jvmTarget          : String.valueOf(stableJDK.ordinal()+1),
        versionName        : customVersionName + " stable",
        //ver                : "latest.release"
]
def canary = [
        targetSdk          : Integer.valueOf(canaryBuildToolsV.split("\\.")[0]),
        sourceCompatibility: stableJDK,
        targetCompatibility: canaryJDK,
        jvmTarget          : String.valueOf(canaryJDK.ordinal()+1),
        versionName        : customVersionName + " canary",
        //ver                : "latest.integration"
]

def currentBT = !BuildToolsWithSourceCode ? canaryBT : stableBT
def current = isCanaryVersion ? canary : stable


android {
    compileSdk currentBT.compileSdk
    buildToolsVersion currentBT.buildToolsVersion
    defaultConfig {
        applicationId "com.privacyFirst.usageStats"
        minSdk 21
        targetSdk current.targetSdk
        versionCode Integer.valueOf(customVersionName.split("\\.")[0])
        versionName current.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    compileOptions {
        sourceCompatibility current.sourceCompatibility
        targetCompatibility current.targetCompatibility
        coreLibraryDesugaringEnabled true
    }
    kotlinOptions {
        jvmTarget = current.jvmTarget
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            minifyEnabled false
            shrinkResources false
            zipAlignEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}


dependencies {
    implementation project(':lib:infrastructure')
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation "androidx.collection:collection-ktx:1.1.0"
    implementation "androidx.fragment:fragment-ktx:1.3.6"

    def room_version = "2.3.0"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    //kapt("androidx.room:room-compiler:$room_version")
    //ksp("androidx.room:room-compiler:$room_version")
    implementation "androidx.room:room-ktx:$room_version"
    //implementation "androidx.room:room-rxjava2:$room_version"
    //implementation "androidx.room:room-rxjava3:$room_version"
    //implementation "androidx.room:room-guava:$room_version"
    testImplementation "androidx.room:room-testing:$room_version"
    //implementation "androidx.room:room-paging:2.4.0-alpha04"

    implementation 'com.google.android.material:material:1.4.0'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
}